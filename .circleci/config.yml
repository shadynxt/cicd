version: 2.1

commands:
  dependencies:
    steps:
      - run:
          name: Installing necessary packages
          command: |
            sudo apt update
            sudo apt install -y tar gzip curl software-properties-common
      - run:
          name: Installing aws-cli
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Installing ansible
          command: |
            sudo add-apt-repository --yes --update ppa:ansible/ansible
            sudo apt install ansible
  destroy-environment:
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Destroying environment
          when: on_fail
          command: |
            aws --region us-east-1 cloudformation delete-stack \
              --stack-name "udapeople-frontend-<< parameters.workflow_id >>"
            aws --region us-east-1 cloudformation delete-stack \
              --stack-name "udapeople-backend-<< parameters.workflow_id >>"
            aws s3 rm "s3://udapeople-<< parameters.workflow_id >>" --recursive

  revert-migrations:
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Reverting migrations
          when: on_fail
          command: |
            SUCCESS=$(curl "https://kvdb.io/LHFkzdfqGQiT5AocazCCLL//migration_<<parameters.workflow_id>>" -H "X-Api-Key: ${THISDB_API_KEY}")
            if (($SUCCESS == 1)); then
              cd backend
              npm install
              npm run migrations:revert
            fi
            
jobs:
  build-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: 
          - build-frontend
      - run:
          name: "build the front-end"
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          key: build-frontend
          paths:
            - frontend/node_modules
  

  build-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - build-backend
      - run:
          name: Back-end build
          working_directory: ./backend
          command: |
            npm init --yes
            npm install --save-dev typescript
            npm install --production 
            npm install
            echo "test"
            npm run build

            # cp .env dist/.env
            # pwd && ls -al
      - persist_to_workspace:
          root: ~/
          paths:
            - project/backend/dist
            - project/backend/node_modules
      - save_cache:
          key: build-backend
          paths:
            - backend/node_modules

  test-backend:
    docker:
      - image: cimg/node:13.8.0
      # Docker image here
    steps:
      - checkout
      - restore_cache:
          keys:
            - build-backend
      - run:
          name: Testing backend
          command: |
            cd backend
            npm install
            npm run test
  test-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - build-frontend
      - run:
          name: Testing frontend
          command: |
            cd frontend
            npm install
            npm run test
            
  scan-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - build-frontend
      - run:
          name: Scanning backend
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force

  scan-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - build-frontend
      - run:
          name: Scanning frontend
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force

  deploy-infrastructure:
    docker:
      - image: cimg/base:2021.04
    steps:
      - checkout
      - dependencies
      # Checkout code from git
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws --region us-east-1 cloudformation deploy \
            --template-file .circleci/files/backend.yml \
            --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
            --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7} \
            --tags project=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws --region us-east-1 cloudformation deploy \
            --template-file .circleci/files/frontend.yml \
            --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} \
            --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7} \
            --tags project=udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws cloudformation describe-stacks \
            --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --query "Stacks[0].Outputs[0].OutputValue" \
            --output text >> .circleci/ansible/inventory.txt
            cat ~/project/.circleci/ansible/inventory.txt

      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment:
          workflow_id: '${CIRCLE_WORKFLOW_ID:0:7}'  

  # configure-infrastructure:
  #   docker:
  #     - image: python:3.7-alpine3.11
  #       environment:
  #         NODE_ENV: "production"
  #         VERSION: "1"
  #         ENVIRONMENT: "production"
  #         TYPEORM_CONNECTION: $TYPEORM_CONNECTION
  #         TYPEORM_HOST: $TYPEORM_HOST
  #         TYPEORM_USERNAME: $TYPEORM_USERNAME
  #         TYPEORM_PASSWORD: $TYPEORM_PASSWORD
  #         TYPEORM_DATABASE: $TYPEORM_DATABASE
  #         TYPEORM_PORT: $TYPEORM_PORT
  #         TYPEORM_ENTITIES: $TYPEORM_ENTITIES
  #   steps:
  #     - checkout
  #     # Add ssh keys with fingerprint
  #     - add_ssh_keys:
  #         fingerprints: ["30:44:e2:d6:e8:8c:c5:62:d5:4d:e1:e1:a4:78:d4:38"]
  #     - attach_workspace:
  #         at: ~/
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           apk add curl
  #           apk add --upgrade bash
  #           apk add --update ansible
  #           apk add openssh-client
  #           pip3 install awscli
  #     - run:
  #         name: Configure server
  #         command: |
  #           cat ~/project/.circleci/ansible/inventory.txt
  #           export ANSIBLE_HOST_KEY_CHECKING=False
  #           ansible-playbook -i ~/project/.circleci/ansible/inventory.txt ~/project/.circleci/ansible/configure-server.yml    
  #     # - destroy-environment:
  #     #     workflow_id: '${CIRCLE_WORKFLOW_ID:0:7}'  

  # deploy-infrastructure:
  #   docker:
  #     - image: amazon/aws-cli
  #   steps:
  #     - checkout
  #     - run:
  #         name: Ensure back-end infrastructure exists
  #         command: |
  #           aws --region us-east-1 cloudformation deploy \
  #             --template-file .circleci/files/backend.yml \
  #             --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
  #             --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7} \
  #             --tags project=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
  #     - run:
  #         name: Ensure front-end infrastructure exist
  #         command: |
  #           aws --region us-east-1 cloudformation deploy \
  #             --template-file .circleci/files/frontend.yml \
  #             --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} \
  #             --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7} \
  #             --tags project=udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
  #     - run:
  #         name: Add back-end ip to ansible inventory
  #         command: |
  #           aws cloudformation describe-stacks \
  #             --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
  #             --query "Stacks[0].Outputs[0].OutputValue" \
  #             --output text >> .circleci/ansible/inventory.txt
  #             cat ~/project/.circleci/ansible/inventory.txt
  #     - run: yum -y install tar gzip
  #     - persist_to_workspace:
  #         root: .circleci/ansible
  #         paths:
  #           - inventory.txt
  #     # This command has a when: on_fail
  #     - destroy-environment:
  #         workflow_id: "${CIRCLE_WORKFLOW_ID}"

  configure-infrastructure:
    docker:
      - image: python:3.9.1-alpine3.12
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "30:44:e2:d6:e8:8c:c5:62:d5:4d:e1:e1:a4:78:d4:38"
      - attach_workspace:
          at: /tmp/.circleci/ansible
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible aws-cli
      - run:
          name: Configure server
          command: |
            ansible-playbook -i /tmp/.circleci/ansible/inventory.txt .circleci/ansible/configure-server.yml
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID}"


  # run-migrations:
  #   docker:
  #     - image: sleavely/node-awscli:14.x
  #   steps:
  #     - checkout
  #     - restore_cache:
  #         keys:
  #           - build-backend
  #     - run:
  #         name: Run migrations
  #         command: |
  #           cd backend
  #           cat .env
  #           npm i
  #           npm run build
  #           npm run migrations > migrations_dump.txt
  #           cat migrations_dump.txt
            
  #     - run:
  #         name: Sending migration status to kvdb
  #         command: |
  #           if grep -q "has been executed successfully"  ./backend/migrations_dump.txt   
  #           then
  #             curl https://kvdb.io/LHFkzdfqGQiT5AocazCCLL//migration_${CIRCLE_WORKFLOW_ID:0:7} \
  #               -H "X-Api-Key: ${THISDB_API_KEY}" \
  #               -d "1"
  #           else
  #             curl https://kvdb.io/LHFkzdfqGQiT5AocazCCLL//migration_${CIRCLE_WORKFLOW_ID:0:7} \
  #               -H "X-Api-Key: ${THISDB_API_KEY}" \
  #               -d "0"
  #           fi
  #     - destroy-environment:
  #         workflow_id: '${CIRCLE_WORKFLOW_ID:0:7}'
  #     - destroy-environment:
  #         workflow_id: '${CIRCLE_WORKFLOW_ID:0:7}'

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [build-backend]
      - run:
          name: prepare environment for backend build
          command: |
            cat \<< EOF > backend/.env
            ENVIRONMENT=production
            VERSION=1
            TYPEORM_CONNECTION=postgres
            TYPEORM_MIGRATIONS_DIR=./src/migrations
            TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts
            TYPEORM_MIGRATIONS=./src/migrations/*.ts
            TYPEORM_HOST=${TYPEORM_HOST}
            TYPEORM_PORT=${TYPEORM_PORT}
            TYPEORM_USERNAME=${TYPEORM_USERNAME}
            TYPEORM_PASSWORD=${TYPEORM_PASSWORD}
            TYPEORM_DATABASE=${TYPEORM_DATABASE}
            EOF
      - run:
          name: Install dependencies
          command: |
            sudo apt update
            sudo apt install -y awscli
      - run:
          name: Run migrations
          command: |
            cd backend
            cat .env
            npm i
            npm run build
            npm run migrations 2>&1 | tee migration-log.txt
      - run:
          name: Sending migration status to kvdb
          command: |
            if grep -q "has been executed successfully"  ./backend/migrations_dump.txt   
            then
              curl -k https://kvdb.io/LHFkzdfqGQiT5AocazCCLL//migration_${CIRCLE_WORKFLOW_ID:0:7} \
                -H "X-Api-Key: ${THISDB_API_KEY}" \
                -d "1"
            else
              curl -k https://kvdb.io/LHFkzdfqGQiT5AocazCCLL//migration_${CIRCLE_WORKFLOW_ID:0:7} \
                -H "X-Api-Key: ${THISDB_API_KEY}" \
                -d "0"
            fi      
      - persist_to_workspace:
          root: ~/project
          paths:
            - backend

      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID}"

  deploy-frontend:
    docker:
      - image: cimg/node:13.14.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - build-frontend
      - dependencies
      - run:
          name: Get backend url
          command: |
             BACKEND_IP=$(aws cloudformation describe-stacks --stack-name udapeople-backend-"${CIRCLE_WORKFLOW_ID:0:7}" --query "Stacks[0].Outputs[0].OutputValue" --output text)
             API_URL="http://${BACKEND_IP}:3030"
             echo "API_URL=${API_URL}" >> frontend/.env
             cat frontend/.env
      - run:
          name: Deploy frontend objects
          working_directory: ./frontend
          command: |
            npm i
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist "s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}" --recursive
      - destroy-environment:
          workflow_id: '${CIRCLE_WORKFLOW_ID:0:7}'
      - revert-migrations:
          workflow_id: '${CIRCLE_WORKFLOW_ID:0:7}'
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      # Here's where you will add some code to rollback on failure

  # deploy-frontend:
  #   docker:
  #     - image: amazon/aws-cli
  #   steps:
  #     - checkout
  #     - restore_cache:
  #         keys: [build-frontend]
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           yum install -y curl tar sudo
  #           curl -sL https://rpm.nodesource.com/setup_13.x | sudo bash -
  #           yum install -y nodejs
  #           node --version
  #     - run:
  #         name: Get backend url
  #         command: |
  #           export API_URL=$(curl -H "token: ${CIRCLE_WORKFLOW_ID}" \
  #             --request GET https://api.memstash.io/values/backendurl)
  #           export API_URL="http://${API_URL}:3030"
  #           echo "${API_URL}" > .circleci/api_url.txt
  #     - run:
  #         name: Deploy frontend objects
  #         command: |
  #           export API_URL=$(cat .circleci/api_url.txt)
  #           echo "${API_URL}" > frontend/.env
  #           cd frontend
  #           npm i
  #           npm run build
  #           aws s3 cp dist s3://udapeople-"${CIRCLE_WORKFLOW_ID}" --recursive
  #     - destroy-environment:
  #         workflow_id: ${CIRCLE_WORKFLOW_ID}

  # deploy-backend:
  #   docker:
  #     - image: python:3.7-alpine3.11
  #       environment:
  #         NODE_ENV: "production"
  #         VERSION: "1"
  #         ENVIRONMENT: "production"
  #         TYPEORM_CONNECTION: $TYPEORM_CONNECTION
  #         TYPEORM_HOST: $TYPEORM_HOST
  #         TYPEORM_USERNAME: $TYPEORM_USERNAME
  #         TYPEORM_PASSWORD: $TYPEORM_PASSWORD
  #         TYPEORM_DATABASE: $TYPEORM_DATABASE
  #         TYPEORM_PORT: $TYPEORM_PORT
  #         TYPEORM_ENTITIES: $TYPEORM_ENTITIES       
  #   steps:
  #     - checkout
  #     - add_ssh_keys:
  #         fingerprints: ["30:44:e2:d6:e8:8c:c5:62:d5:4d:e1:e1:a4:78:d4:38"]
  #     - attach_workspace: 
  #         at: ~/
  #     - restore_cache:
  #         keys:
  #           - build-backend
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           apk add --update ansible nodejs npm tar gzip
  #     - run:
  #         name: Deploy backend
  #         command: |
  #           cd backend
  #           npm install
  #           npm run build
  #           cd ..
  #           tar -C backend -czvf artifact.tar.gz .
  #           cat ~/project/.circleci/ansible/inventory.txt
  #           export ANSIBLE_HOST_KEY_CHECKING=False
  #           ansible-playbook -i ~/project/.circleci/ansible/inventory.txt ~/project/.circleci/ansible/deploy-backend.yml
  #    # - destroy-environment:
  #    #    workflow_id: '${CIRCLE_WORKFLOW_ID:0:7}'

  deploy-backend:
    docker:
      - image: python:3.9.1-alpine3.12
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "30:44:e2:d6:e8:8c:c5:62:d5:4d:e1:e1:a4:78:d4:38"
      - restore_cache:
          keys: [build-backend]
      - attach_workspace:
          at: /tmp/artifacts
      - run:
          name: Install dependencies
          command: |
            apk update
            apk add --update ansible aws-cli openssh-client tar
      - run:
          name: compress backend
          command: |
            tar -C /tmp/artifacts/backend -czvf artifact.tar.gz .
      - run:
          name: Deploy backend
          command: |
            cd .circleci/ansible
            export ANSIBLE_HOST_KEY_CHECKING=False
            ansible-playbook -i /tmp/artifacts/inventory.txt deploy-backend.yml
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID}"
  # deploy-backend:
  #   docker:
  #     - image: python:3.9-alpine3.16
  #   steps:
  #     - checkout
  #     - add_ssh_keys:
  #         fingerprints: ["30:44:e2:d6:e8:8c:c5:62:d5:4d:e1:e1:a4:78:d4:38"]
  #     - attach_workspace:
  #         at: ~/
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           apk add --update ansible nodejs npm openssh-client tar gzip
  #     - restore_cache:
  #         keys: ["build-backend"]  # -<< pipeline.id >>
  #     - run:
  #         name: Deploy backend
  #         command: |
  #           cd backend
  #           npm install
  #           npm run build
  #           cd ..
  #           tar -C backend -czvf artifact.tar.gz .
  #           cat ~/project/.circleci/ansible/inventory.txt
  #     - run:
  #         name: Deploy backend 2
  #         command: |
  #           export ANSIBLE_HOST_KEY_CHECKING=False
  #           ansible-playbook -i ~/project/.circleci/ansible/inventory.txt ~/project/.circleci/ansible/deploy-backend.yml
  #            # export ANSIBLE_HOST_KEY_CHECKING=False
  #            # ansible-playbook \
  #            #   -i .circleci/ansible/inventory.txt \
  #            #   .circleci/ansible/deploy-backend.yml
  #     - run:
  #         name: Install AWS CLI for rollback
  #         when: on_fail
  #         command:
  #           apk add --update py3-pip && pip3 install --upgrade pip && pip3 install awscli

  smoke-test-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update curl
            pip install awscli
      - run:
          name: Backend smoke test
          command: |
             BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --output text)
             API_URL="http://${BACKEND_IP}:3030"
             if curl -s "${API_URL}/api/status" | grep "ok"
             then
              exit 0
             else
              exit 1
             fi 
  smoke-test-frontend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update curl
            pip install awscli
      - run:
          name: Smoke test for front end
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website.${AWS_DEFAULT_REGION}.amazonaws.com"             
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
              exit 0
            else
              exit 1
            fi           
      - destroy-environment:
          workflow_id: '${CIRCLE_WORKFLOW_ID:0:7}'
      - revert-migrations:
          workflow_id: '${CIRCLE_WORKFLOW_ID:0:7}' 
 
  cloudfront-update:
    docker:
      - image: cimg/base:2021.04
    steps:
      - checkout
      - dependencies
      - run:
          name: get old workflow for clean
          command: |
            OldWorkflowID=$(aws cloudformation \
            list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
            --no-paginate --output text)
            curl https://kvdb.io/LHFkzdfqGQiT5AocazCCLL//migration_${CIRCLE_WORKFLOW_ID:0:7} \
            -H "X-Api-Key: ${THISDB_API_KEY}" \
            -d "$OldWorkflowID"  
      - run:
          name: Updating cloudfront distribution
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --stack-name InitialStack \
            --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
            --tags project=udapeople

      - destroy-environment:
          workflow_id: '${CIRCLE_WORKFLOW_ID:0:7}'
      - revert-migrations:
          workflow_id: '${CIRCLE_WORKFLOW_ID:0:7}'

  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Remove old stacks and files
          command: |
            export OldWorkflowID=$(aws cloudformation \
            list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
            --no-paginate --output text)
            curl https://kvdb.io/LHFkzdfqGQiT5AocazCCLL//migration_${CIRCLE_WORKFLOW_ID:0:7} \
            -H "X-Api-Key: ${THISDB_API_KEY}" \
            -d "$OldWorkflowID" 
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              aws s3 rm s3://udapeople-"${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name frontend-"${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name backend-"${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name cloudfront-"${OldWorkflowID}"
            fi
  # cleanup:
  #   docker:
  #     - image: amazon/aws-cli
  #   steps:
  #     - checkout
  #     - run:
  #         name: Remove old stacks and files
  #         command: |
  #           if [[ 6f4e40c == "" ]]
  #           then
  #           echo "No workflow id found"
  #           else
  #           if [[ "683c244" != "6f4e40c" ]]
  #           then
  #             echo "$OldWorkflowID!=$CurrentWorkflowID => will delete old version"
  #             aws s3 rm "s3://udapeople-6f4e40c" --recursive
  #             aws cloudformation delete-stack --stack-name "udapeople-frontend-6f4e40c"
  #             aws cloudformation delete-stack --stack-name "udapeople-backend-6f4e40c"
  #           fi
  #           fi

workflows:
  default:
    jobs:
       - build-frontend
       - build-backend
       - test-frontend:
           requires: [build-frontend]
       - test-backend:
           requires: [build-backend]
       - scan-backend:
           requires: [build-backend]
       - scan-frontend:
           requires: [build-frontend]
       - deploy-infrastructure:
           requires: [test-frontend, test-backend, scan-frontend, scan-backend]
           filters:
             branches:
               only: [main] 
       - configure-infrastructure:
           requires: [deploy-infrastructure]
       - run-migrations:
           requires: [configure-infrastructure]
       - deploy-frontend:
           requires: [run-migrations]
       - deploy-backend:
           requires: [run-migrations]
       - smoke-test-backend:
           requires: [deploy-backend]
       - smoke-test-frontend:
           requires: [deploy-frontend]
      
       - cloudfront-update:
           requires: [smoke-test-backend,smoke-test-frontend]
      # #- cleanup
      # #     requires: [smoke-test-backend,smoke-test-frontend]
       - cleanup:
           requires: [cloudfront-update]